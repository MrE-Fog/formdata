// Copyright Â© 2015 by Michael Dilger (of New Zealand)
// This code is licensed under the MIT license (see LICENSE-MIT for details)

use uploaded_file::UploadedFile;

/// The extracted text fields and uploaded files from a `multipart/form-data` request.
///
/// Use `parse_multipart` to devise this object from a request.
#[derive(Clone, Debug, PartialEq)]
pub struct FormData {
    /// Name-value pairs for plain text fields. Technically, these are form data parts with no
    /// filename specified in the part's `Content-Disposition`.
    pub fields: Vec<(String, String)>,
    /// Name-value pairs for temporary files. Technically, these are form data parts with a filename
    /// specified in the part's `Content-Disposition`.
    pub files: Vec<(String, UploadedFile)>,
}

impl FormData {
    pub fn new() -> FormData {
        FormData { fields: vec![], files: vec![] }
    }
}

// This was generated by serde_codegen.  Due to a bug in serde_codegen, we include
// and commit its generated output for the time being.
impl ::serde::de::Deserialize for FormData {
    fn deserialize<__D>(deserializer: &mut __D)
     -> ::std::result::Result<FormData, __D::Error> where
     __D: ::serde::de::Deserializer {
        {
            #[allow(non_camel_case_types)]
            enum __Field { __field0, __field1, }
            impl ::serde::de::Deserialize for __Field {
                #[inline]
                fn deserialize<D>(deserializer: &mut D)
                 -> ::std::result::Result<__Field, D::Error> where
                 D: ::serde::de::Deserializer {
                    use std::marker::PhantomData;
                    struct __FieldVisitor<D> {
                        phantom: PhantomData<D>,
                    }
                    impl <__D> ::serde::de::Visitor for __FieldVisitor<__D>
                     where __D: ::serde::de::Deserializer {
                        type
                        Value
                        =
                        __Field;
                        fn visit_usize<E>(&mut self, value: usize)
                         -> ::std::result::Result<__Field, E> where
                         E: ::serde::de::Error {
                            match value {
                                0usize => { Ok(__Field::__field0) }
                                1usize => { Ok(__Field::__field1) }
                                _ => {
                                    Err(::serde::de::Error::syntax("expected a field"))
                                }
                            }
                        }
                        fn visit_str<E>(&mut self, value: &str)
                         -> ::std::result::Result<__Field, E> where
                         E: ::serde::de::Error {
                            match value {
                                "fields" => { Ok(__Field::__field0) }
                                "files" => { Ok(__Field::__field1) }
                                _ => {
                                    Err(::serde::de::Error::unknown_field(value))
                                }
                            }
                        }
                        fn visit_bytes<E>(&mut self, value: &[u8])
                         -> ::std::result::Result<__Field, E> where
                         E: ::serde::de::Error {
                            match ::std::str::from_utf8(value) {
                                Ok(s) => self.visit_str(s),
                                _ => {
                                    Err(::serde::de::Error::syntax("could not convert a byte string to a String"))
                                }
                            }
                        }
                    }
                    deserializer.visit(__FieldVisitor::<D>{phantom:
                                                               PhantomData,})
                }
            }
            struct __Visitor<__D: ::serde::de::Deserializer>(::std::marker::PhantomData<__D>);
            impl <__D: ::serde::de::Deserializer> ::serde::de::Visitor for
             __Visitor<__D> {
                type
                Value
                =
                FormData;
                #[inline]
                fn visit_seq<__V>(&mut self, mut visitor: __V)
                 -> ::std::result::Result<FormData, __V::Error> where
                 __V: ::serde::de::SeqVisitor {
                    {
                        let __field0 =
                            match try!(visitor . visit (  )) {
                                Some(value) => { value }
                                None => {
                                    return Err(::serde::de::Error::end_of_stream());
                                }
                            };
                        let __field1 =
                            match try!(visitor . visit (  )) {
                                Some(value) => { value }
                                None => {
                                    return Err(::serde::de::Error::end_of_stream());
                                }
                            };
                        try!(visitor . end (  ));
                        Ok(FormData{fields: __field0, files: __field1,})
                    }
                }
                #[inline]
                fn visit_map<__V>(&mut self, mut visitor: __V)
                 -> ::std::result::Result<FormData, __V::Error> where
                 __V: ::serde::de::MapVisitor {
                    {
                        let mut __field0 = None;
                        let mut __field1 = None;
                        while let Some(key) = try!(visitor . visit_key (  )) {
                            match key {
                                __Field::__field0 => {
                                    __field0 =
                                        Some(try!(visitor . visit_value (
                                                  )));
                                }
                                __Field::__field1 => {
                                    __field1 =
                                        Some(try!(visitor . visit_value (
                                                  )));
                                }
                            }
                        }
                        let __field0 =
                            match __field0 {
                                Some(__field0) => __field0,
                                None =>
                                try!(visitor . missing_field ( "fields" )),
                            };
                        let __field1 =
                            match __field1 {
                                Some(__field1) => __field1,
                                None =>
                                try!(visitor . missing_field ( "files" )),
                            };
                        try!(visitor . end (  ));
                        Ok(FormData{fields: __field0, files: __field1,})
                    }
                }
            }
            const FIELDS: &'static [&'static str] = &["fields", "files"];
            deserializer.visit_struct("FormData", FIELDS,
                                      __Visitor::<__D>(::std::marker::PhantomData))
        }
    }
}
impl ::serde::ser::Serialize for FormData {
    fn serialize<__S>(&self, serializer: &mut __S)
     -> ::std::result::Result<(), __S::Error> where
     __S: ::serde::ser::Serializer {
        {
            struct Visitor<'__a> {
                state: usize,
                value: &'__a FormData,
                _structure_ty: ::std::marker::PhantomData<&'__a FormData>,
            }
            impl <'__a> ::serde::ser::MapVisitor for Visitor<'__a> {
                #[inline]
                fn visit<S>(&mut self, serializer: &mut S)
                 -> ::std::result::Result<Option<()>, S::Error> where
                 S: ::serde::ser::Serializer {
                    loop  {
                        match self.state {
                            0usize => {
                                self.state += 1;
                                { }
                                return Ok(Some(try!(serializer .
                                                    visit_struct_elt (
                                                    "fields" ,
                                                    &self.value.fields , ))));
                            }
                            1usize => {
                                self.state += 1;
                                { }
                                return Ok(Some(try!(serializer .
                                                    visit_struct_elt (
                                                    "files" ,
                                                    &self.value.files , ))));
                            }
                            _ => { return Ok(None); }
                        }
                    }
                }
                #[inline]
                fn len(&self) -> Option<usize> { Some(0 + 1 + 1) }
            }
            serializer.visit_struct("FormData",
                                    Visitor{value: self,
                                            state: 0,
                                            _structure_ty:
                                                ::std::marker::PhantomData::<&FormData>,})
        }
    }
}
